# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, Zilliqa Research
# This file is distributed under the same license as the scilla中文文档 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: scilla中文文档 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-21 15:18+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../index.rst:7
msgid "Scilla"
msgstr "Scilla"

#: ../index.rst:16
msgid ""
"`Scilla` (short for `Smart Contract Intermediate-Level LAnguage`) is an "
"intermediate-level smart contract language being developed for the "
"`Zilliqa <https://zilliqa.com>`_ blockchain.  Scilla is designed as a "
"principled language with smart contract safety in mind."
msgstr "`Scilla` （即 `Smart Contract Intermediate-Level LAnguage`）是为 `Zilliqa <https://zilliqa.com>`_ 区块链开发的智能合约中级语言。Scilla是按照原则性语言进行设计的，并且充分考虑了智能合约的安全性。"

#: ../index.rst:21
msgid ""
"Scilla imposes a structure on smart contracts that will make applications"
" less vulnerable to attacks by eliminating certain known vulnerabilities "
"directly at the language-level. Furthermore, the principled structure of "
"Scilla will make applications inherently more secure and amenable to "
"formal verification."
msgstr "Scilla通过在智能合约上强加一种结构，从而可以直接在语言级别消除某些已知漏洞，使应用程序不易被攻击。此外，Scilla的原则性结构设计将使应用程序从根源上解决安全问题，而且这种设计更易于接受形式验证。"

#: ../index.rst:26
msgid ""
"The language is being developed hand-in-hand with formalization of its "
"semantics and its embedding into the `Coq proof assistant "
"<https://coq.inria.fr/>`_ — a state-of-the art tool for mechanized proofs"
" about properties of programs. Coq is  based on advanced dependently-"
"typed theory and features a large set of mathematical libraries.  It has "
"been successfully applied previously to implement certified (i.e., fully "
"mechanically verified) compilers, concurrent and distributed "
"applications, including blockchains among others."
msgstr "该语言与语义形式化以及将其嵌入 `Coq证明助手 <https://coq.inria.fr/>`_ （一种用于对程序属性进行机械化证明的先进工具）进行着并行开发。Coq是基于高级的依赖类型理论，并以大量的数学库为其特征。在此之前，Coq已经成功应用于实现认证(即完全机械验证)编译器、并发和分布式应用程序，其中就包括区块链等。"

#: ../index.rst:35
msgid ""
"`Zilliqa` --- the underlying blockchain platform on which Scilla "
"contracts are run --- has been designed to be scalable. It employs the "
"idea of sharding to validate transactions in parallel. Zilliqa has an "
"intrinsic token named `Zilling` (ZIL for short) that are required to run "
"smart contracts on Zilliqa."
msgstr "`Zilliqa` 是一个具有可扩展性的，Scilla合约在其上运行的基础区块链平台。它采用分片的思想进行并行事务验证。Zilliqa有一个名为 `Zilling` （简称ZIL）的内置通证，此通证需要在Zilliqa上运行智能合约。"

#: ../index.rst:42
msgid "Development Status"
msgstr "发展现状"

#: ../index.rst:44
msgid ""
"Scilla is under active research and development and hence parts of the "
"specification described in this document are subject to change. Scilla "
"currently comes with an interpreter binary that has been integrated into "
"two Scilla-specific web-based IDEs. :ref:`trial-label` presents the "
"features of the two IDEs."
msgstr "Scilla正在积极的研究和开发中，因此本文档中描述的部分规范可能会发生变化。Scilla目前附带了一个解释器二进制文件，已集成到两个Scilla特定的基于web的IDE中。  :ref:`trial-label`  展示了这两个IDE的特性。"

#: ../index.rst:51
msgid "Resources"
msgstr "相关资源"

#: ../index.rst:53
msgid ""
"There are several resources to learn about Scilla and Zilliqa. Some of "
"these are given below:"
msgstr "有关Scilla和Zilliqa的学习资料有不少，下面列了一些经常会用到的："

#: ../index.rst:67
msgid "**Scilla**"
msgstr "**Scilla**"

#: ../index.rst:58
msgid "`Scilla Design Paper <https://ilyasergey.net/papers/scilla-oopsla19.pdf>`_"
msgstr "`Scilla设计论文 <https://ilyasergey.net/papers/scilla-oopsla19.pdf>`_"

#: ../index.rst:60
msgid ""
"`Scilla Slides  "
"<https://drive.google.com/file/d/10gIef8jeoQ2h9kYInvU3s0i5B6Z9syGB/view>`_"
msgstr "`Scilla幻灯片 <https://www.china-zil.com/wp-content/uploads/2021/06/scilla_slides.pdf>`_"

#: ../index.rst:62
msgid "`Scilla Language Grammar <https://docs.zilliqa.com/scilla-grammar.pdf>`_"
msgstr "`Scilla语言基础语法 <https://docs.zilliqa.com/scilla-grammar.pdf>`_"

#: ../index.rst:65
msgid ""
"`Scilla Design Story Piece by Piece: Part 1 (Why do we need a new "
"language?) <https://blog.zilliqa.com/scilla-design-story-piece-by-piece-"
"part-1-why-do-we-need-a-new-language-27d5f14ae661>`_"
msgstr "`Scilla设计背后的故事之为什么我们需要一门新语言 <https://www.china-zil.com/news/%e6%99%ba%e8%83%bd%e5%90%88%e7%ba%a6%e8%af%ad%e8%a8%80scilla%e7%9a%84%e8%ae%be%e8%ae%a1%e6%95%85%e4%ba%8b%ef%bc%88%e6%90%ac%e7%a0%96%ef%bc%89/>`_"

#: ../index.rst:76
msgid "**Zilliqa**"
msgstr "**Zilliqa**"

#: ../index.rst:70
msgid ""
"`The Zilliqa Design Story Piece by Piece: Part 1 (Network Sharding) "
"<https://blog.zilliqa.com/https-blog-zilliqa-com-the-zilliqa-design-"
"story-piece-by-piece-part1-d9cb32ea1e65>`_"
msgstr "`Zilliqa设计背后的故事之网络分片（一） <https://blog.zilliqa.com/https-blog-zilliqa-com-the-zilliqa-design-story-piece-by-piece-part1-d9cb32ea1e65>`_"

#: ../index.rst:71
msgid ""
"`The Zilliqa Design Story Piece by Piece: Part 2 (Consensus Protocol) "
"<https://blog.zilliqa.com/the-zilliqa-design-story-piece-by-piece-part-2"
"-consensus-protocol-e38f6bf566e3>`_"
msgstr "`Zilliqa设计背后的故事之共识协议（二） <https://blog.zilliqa.com/the-zilliqa-design-story-piece-by-piece-part-2-consensus-protocol-e38f6bf566e3>`_"

#: ../index.rst:72
msgid ""
"`The Zilliqa Design Story Piece by Piece: Part 3 (Making Consensus "
"Efficient) <https://blog.zilliqa.com/the-zilliqa-design-story-piece-by-"
"piece-part-3-making-consensus-efficient-7a9c569a8f0e>`_"
msgstr "`Zilliqa设计背后的故事之共识效率（三） <https://blog.zilliqa.com/the-zilliqa-design-story-piece-by-piece-part-3-making-consensus-efficient-7a9c569a8f0e>`_"

#: ../index.rst:73
msgid "`Technical Whitepaper <https://docs.zilliqa.com/whitepaper.pdf>`_"
msgstr "`技术白皮书 <https://docs.zilliqa.com/whitepaper.pdf>`_"

#: ../index.rst:74
msgid ""
"`The Not-So-Short Zilliqa Technical FAQ "
"<https://docs.zilliqa.com/techfaq.pdf>`_"
msgstr "`Zilliqa技术答疑 <https://docs.zilliqa.com/techfaq.pdf>`_"

#: ../index.rst:79
msgid "Contents"
msgstr "目录"

