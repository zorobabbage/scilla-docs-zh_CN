# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, Zilliqa Research
# This file is distributed under the same license as the scilla中文文档 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: scilla中文文档 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-21 15:18+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../stdlib.rst:2
msgid "The Scilla Standard Library"
msgstr ""

#: ../stdlib.rst:5
msgid ""
"The Scilla standard library contains five libraries: "
"``BoolUtils.scilla``, ``IntUtils.scilla``, ``ListUtils.scilla``, "
"``NatUtils.scilla`` and ``PairUtils.scilla``. As the names suggests these"
" contracts implement utility operations for the ``Bool``, ``IntX``, "
"``List``, ``Nat`` and ``Pair`` types, respectively."
msgstr ""

#: ../stdlib.rst:11
msgid ""
"To use functions from the standard library in a contract, the relevant "
"library file must be imported using the ``import`` declaration. The "
"following code snippet shows how to import the functions from the "
"``ListUtils`` and ``IntUtils`` libraries:"
msgstr ""

#: ../stdlib.rst:20
msgid ""
"The ``import`` declaration must occur immediately before the contract's "
"own library declaration, e.g.:"
msgstr ""

#: ../stdlib.rst:34
msgid "Below, we present the functions defined in each of the library."
msgstr ""

#: ../stdlib.rst:37
msgid "BoolUtils"
msgstr ""

#: ../stdlib.rst:39
msgid ""
"``andb : Bool -> Bool -> Bool``: Computes the logical AND of two ``Bool``"
" values."
msgstr ""

#: ../stdlib.rst:41
msgid ""
"``orb  : Bool -> Bool -> Bool``: Computes the logical OR of two ``Bool`` "
"values."
msgstr ""

#: ../stdlib.rst:43
msgid ""
"``negb : Bool -> Bool``: Computes the logical negation of a ``Bool`` "
"value."
msgstr ""

#: ../stdlib.rst:45
msgid ""
"``bool_to_string : Bool -> String``: Transforms a ``Bool`` value into a "
"``String`` value. ``True`` is transformed into ``\"True\"``, and "
"``False`` is transformed into ``\"False\"``."
msgstr ""

#: ../stdlib.rst:50
msgid "IntUtils"
msgstr ""

#: ../stdlib.rst:52
msgid ""
"``intX_eq : IntX -> IntX -> Bool``: Equality operator specialised for "
"each ``IntX`` type."
msgstr ""

#: ../stdlib.rst:74
msgid ""
"``uintX_eq : UintX -> UintX -> Bool``: Equality operator specialised for "
"each ``UintX`` type."
msgstr ""

#: ../stdlib.rst:77
msgid ""
"``intX_lt : IntX -> IntX -> Bool``: Less-than operator specialised for "
"each ``IntX`` type."
msgstr ""

#: ../stdlib.rst:79
msgid ""
"``uintX_lt : UintX -> UintX -> Bool``: Less-than operator specialised for"
" each ``UintX`` type."
msgstr ""

#: ../stdlib.rst:82
msgid ""
"``intX_neq : IntX -> IntX -> Bool``: Not-equal operator specialised for "
"each ``IntX`` type."
msgstr ""

#: ../stdlib.rst:84
msgid ""
"``uintX_neq : UintX -> UintX -> Bool``: Not-equal operator specialised "
"for each ``UintX`` type."
msgstr ""

#: ../stdlib.rst:87
msgid ""
"``intX_le : IntX -> IntX -> Bool``: Less-than-or-equal operator "
"specialised for each ``IntX`` type."
msgstr ""

#: ../stdlib.rst:89
msgid ""
"``uintX_le : UintX -> UintX -> Bool``: Less-than-or-equal operator "
"specialised for each ``UintX`` type."
msgstr ""

#: ../stdlib.rst:92
msgid ""
"``intX_gt : IntX -> IntX -> Bool``: Greater-than operator specialised for"
" each ``IntX`` type."
msgstr ""

#: ../stdlib.rst:94
msgid ""
"``uintX_gt : UintX -> UintX -> Bool``: Greater-than operator specialised "
"for each ``UintX`` type."
msgstr ""

#: ../stdlib.rst:97
msgid ""
"``intX_ge : IntX -> IntX -> Bool``: Greater-than-or-equal operator "
"specialised for each ``IntX`` type."
msgstr ""

#: ../stdlib.rst:99
msgid ""
"``uintX_ge : UintX -> UintX -> Bool``: Greater-than-or-equal operator "
"specialised for each ``UintX`` type."
msgstr ""

#: ../stdlib.rst:104
msgid "ListUtils"
msgstr ""

#: ../stdlib.rst:106
msgid "``list_map : ('A -> 'B) -> List 'A -> : List 'B``."
msgstr ""

#: ../stdlib.rst
msgid ""
"Apply ``f : 'A -> 'B`` to every element of ``l : List 'A``, constructing "
"a list (of type ``List 'B``) of the results."
msgstr ""

#: ../stdlib.rst:125
msgid "``list_filter : ('A -> Bool) -> List 'A -> List 'A``."
msgstr ""

#: ../stdlib.rst
msgid ""
"Filter out elements on the list based on the predicate ``f : 'A -> "
"Bool``. If an element satisfies ``f``, it will be in the resultant list, "
"otherwise it is removed. The order of the elements is preserved."
msgstr ""

#: ../stdlib.rst:146
msgid "``list_head : (List 'A) -> (Option 'A)``."
msgstr ""

#: ../stdlib.rst
msgid ""
"Return the head element of a list ``l : List 'A`` as an optional value. "
"If ``l`` is not empty with the first element ``h``, the result is ``Some "
"h``. If ``l`` is empty, then the result is ``None``."
msgstr ""

#: ../stdlib.rst:153
msgid "``list_tail : (List 'A) -> (Option List 'A)``."
msgstr ""

#: ../stdlib.rst
msgid ""
"Return the tail of a list ``l : List 'A`` as an optional value. If ``l`` "
"is a non-empty list of the form ``Cons h t``, then the result is ``Some "
"t``. If ``l`` is empty, then the result is ``None``."
msgstr ""

#: ../stdlib.rst:160
msgid "``list_foldl_while : ('B -> 'A -> Option 'B) -> 'B -> List 'A -> 'B``"
msgstr ""

#: ../stdlib.rst
msgid ""
"Given a function ``f : 'B -> 'A -> Option 'B``, accumulator ``z : 'B`` "
"and list ``ls : List 'A`` execute a left fold when our given function "
"returns ``Some x : Option 'B`` using ``f z x : 'B`` or list is empty but "
"in the case of ``None : Option 'B`` terminate early, returning ``z``."
msgstr ""

#: ../stdlib.rst:192
msgid "``list_append : (List 'A -> List 'A ->  List 'A)``."
msgstr ""

#: ../stdlib.rst
msgid ""
"Append the first list to the front of the second list, keeping the order "
"of the elements in both lists. Note that ``list_append`` has linear time "
"complexity in the length of the first argument list."
msgstr ""

#: ../stdlib.rst:198
msgid "``list_reverse : (List 'A -> List 'A)``."
msgstr ""

#: ../stdlib.rst
msgid ""
"Return the reverse of the input list. Note that ``list_reverse`` has "
"linear time complexity in the length of the argument list."
msgstr ""

#: ../stdlib.rst:203
msgid "``list_flatten : (List List 'A) -> List 'A``."
msgstr ""

#: ../stdlib.rst
msgid ""
"Construct a list of all the elements in a list of lists. Each element "
"(which has type ``List 'A``) of the input list (which has type ``List "
"List 'A``) are all concatenated together, keeping the order of the input "
"list. Note that ``list_flatten`` has linear time complexity in the total "
"number of elements in all of the lists."
msgstr ""

#: ../stdlib.rst:212
msgid "``list_length : List 'A -> Uint32``"
msgstr ""

#: ../stdlib.rst
msgid ""
"Count the number of elements in a list. Note that ``list_length`` has "
"linear time complexity in the number of elements in the list."
msgstr ""

#: ../stdlib.rst:217
msgid "``list_eq : ('A -> 'A -> Bool) -> List 'A -> List 'A -> Bool``."
msgstr ""

#: ../stdlib.rst
msgid ""
"Compare two lists element by element, using a predicate function ``f : 'A"
" -> 'A -> Bool``. If ``f`` returns ``True`` for every pair of elements, "
"then ``list_eq`` returns ``True``. If ``f`` returns ``False`` for at "
"least one pair of elements, or if the lists have different lengths, then "
"``list_eq`` returns ``False``."
msgstr ""

#: ../stdlib.rst:225
msgid "``list_mem : ('A -> 'A -> Bool) -> 'A -> List 'A -> Bool``."
msgstr ""

#: ../stdlib.rst
msgid ""
"Checks whether an element ``a : 'A`` is an element in the list ``l : "
"List'A``. ``f : 'A -> 'A -> Bool`` should be provided for equality "
"comparison."
msgstr ""

#: ../stdlib.rst:246
msgid "``list_forall : ('A -> Bool) -> List 'A -> Bool``."
msgstr ""

#: ../stdlib.rst
msgid ""
"Check whether all elements of list ``l : List 'A`` satisfy the predicate "
"``f : 'A -> Bool``. ``list_forall`` returns ``True`` if all elements "
"satisfy ``f``, and ``False`` if at least one element does not satisfy "
"``f``."
msgstr ""

#: ../stdlib.rst:253
msgid "``list_exists : ('A -> Bool) -> List 'A -> Bool``."
msgstr ""

#: ../stdlib.rst
msgid ""
"Check whether at least one element of list ``l : List 'A`` satisfies the "
"predicate ``f : 'A -> Bool``. ``list_exists`` returns ``True`` if at "
"least one element satisfies ``f``, and ``False`` if none of the elements "
"satisfy ``f``."
msgstr ""

#: ../stdlib.rst:260
msgid "``list_sort : ('A -> 'A -> Bool) -> List 'A -> List 'A``."
msgstr ""

#: ../stdlib.rst
msgid ""
"Sort the input list ``l : List 'A`` using insertion sort. The comparison "
"function ``flt : 'A -> 'A -> Bool`` provided must return ``True`` if its "
"first argument is less than its second argument. ``list_sort`` has "
"quadratic time complexity."
msgstr ""

#: ../stdlib.rst:296
msgid "``list_find : ('A -> Bool) -> List 'A -> Option 'A``."
msgstr ""

#: ../stdlib.rst
msgid ""
"Return the first element in a list ``l : List 'A`` satisfying the "
"predicate ``f : 'A -> Bool``. If at least one element in the list "
"satisfies the predicate, and the first one of those elements is ``x``, "
"then the result is ``Some x``. If no element satisfies the predicate, the"
" result is ``None``."
msgstr ""

#: ../stdlib.rst:304
msgid "``list_zip : List 'A -> List 'B -> List (Pair 'A 'B)``."
msgstr ""

#: ../stdlib.rst
msgid ""
"Combine two lists element by element, resulting in a list of pairs. If "
"the lists have different lengths, the trailing elements of the longest "
"list are ignored."
msgstr ""

#: ../stdlib.rst:310
msgid "``list_zip_with : ('A -> 'B -> 'C) -> List 'A -> List 'B -> List 'C )``."
msgstr ""

#: ../stdlib.rst
msgid ""
"Combine two lists element by element using a combining function ``f : 'A "
"-> 'B -> 'C``. The result of ``list_zip_with`` is a list of the results "
"of applying ``f`` to the elements of the two lists. If the lists have "
"different lengths, the trailing elements of the longest list are ignored."
msgstr ""

#: ../stdlib.rst:318
msgid "``list_unzip : List (Pair 'A 'B) -> Pair (List 'A) (List 'B)``."
msgstr ""

#: ../stdlib.rst
msgid ""
"Split a list of pairs into a pair of lists consisting of the elements of "
"the pairs of the original list."
msgstr ""

#: ../stdlib.rst:323
msgid "``list_nth : Uint32 -> List 'A -> Option 'A``."
msgstr ""

#: ../stdlib.rst
msgid ""
"Return the element number ``n`` from a list. If the list has at least "
"``n`` elements, and the element number ``n`` is ``x``, ``list_nth`` "
"returns ``Some x``. If the list has fewer than ``n`` elements, "
"``list_nth`` returns ``None``."
msgstr ""

#: ../stdlib.rst:331
msgid "NatUtils"
msgstr ""

#: ../stdlib.rst:333
msgid ""
"``nat_prev : Nat -> Option Nat``: Return the Peano number one less than "
"the current one. If the current number is ``Zero``, the result is "
"``None``. If the current number is ``Succ x``, then the result is ``Some "
"x``."
msgstr ""

#: ../stdlib.rst:338
msgid ""
"``nat_fold_while : ('T -> Nat -> Option 'T) -> 'T -> Nat -> 'T``: Takes "
"arguments ``f : 'T -> Nat -> Option 'T``, ``z : `T`` and ``m : Nat``. "
"This is ``nat_fold`` with early termination. Continues recursing so long "
"as ``f`` returns ``Some y`` with new accumulator ``y``. Once ``f`` "
"returns ``None``, the recursion terminates."
msgstr ""

#: ../stdlib.rst:344
msgid "``is_some_zero : Nat -> Bool``: Zero check for Peano numbers."
msgstr ""

#: ../stdlib.rst:346
msgid ""
"``nat_eq : Nat -> Nat -> Bool``: Equality check specialised for the "
"``Nat`` type."
msgstr ""

#: ../stdlib.rst:349
msgid ""
"``nat_to_int : Nat -> Uint32``: Convert a Peano number to its equivalent "
"``Uint32`` integer."
msgstr ""

#: ../stdlib.rst:352
msgid ""
"``uintX_to_nat : UintX -> Nat``: Convert a ``UintX`` integer to its "
"equivalent Peano number. The integer must be small enough to fit into a "
"``Uint32``. If it is not, then an overflow error will occur."
msgstr ""

#: ../stdlib.rst:356
msgid ""
"``intX_to_nat : IntX -> Nat``: Convert an ``IntX`` integer to its "
"equivalent Peano number. The integer must be non-negative, and must be "
"small enough to fit into a ``Uint32``. If it is not, then an underflow or"
" overflow error will occur."
msgstr ""

#: ../stdlib.rst:363
msgid "PairUtils"
msgstr ""

#: ../stdlib.rst:365
msgid "``fst : Pair 'A 'B -> 'A``: Extract the first element of a Pair."
msgstr ""

#: ../stdlib.rst:375
msgid "``snd : Pair 'A 'B -> 'B``: Extract the second element of a Pair."
msgstr ""

#: ../stdlib.rst:378
msgid "Conversions"
msgstr ""

#: ../stdlib.rst:380
msgid ""
"This library provides conversions b/w Scilla types, particularly between "
"integers and byte strings."
msgstr ""

#: ../stdlib.rst:383
msgid ""
"To enable specifying the encoding of integer arguments to these "
"functions, a type is defined for endianness."
msgstr ""

#: ../stdlib.rst:392
msgid ""
"The functions below, along with their primary result, also return "
"``next_pos : Uint32`` which indicates the position from which any further"
" data extraction from the input ``ByStr`` value can proceed. This is "
"useful when deserializing a byte stream. In other words, ``next_pos`` "
"indicates where this function stopped reading bytes from the input byte "
"string."
msgstr ""

#: ../stdlib.rst:398
msgid ""
"``substr_safe : ByStr -> Uint32 -> Uint32 -> Option ByStr`` While Scilla "
"provides a builtin to extract substrings of byte strings (``ByStr``), it "
"is not exception safe. When provided incorrect arguments, it throws "
"exceptions. This library function is provided as an exception safe "
"function to extract, from a string ``s : ByStr``, a substring starting at"
" position ``pos : Uint32`` and of length ``len : Uint32``. It returns "
"``Some ByStr`` on success and ``None`` on failure."
msgstr ""

#: ../stdlib.rst:406
msgid ""
"``extract_uint32 : IntegerEncoding -> ByStr -> Uint32 -> Option (Pair "
"Uint32 Uint32)`` Extracts a ``Uint32`` value from ``bs : ByStr``, "
"starting at position ``pos : Uint32``. On success, ``Some "
"extracted_uint32_value next_pos`` is returned. ``None`` otherwise."
msgstr ""

#: ../stdlib.rst:410
msgid ""
"``extract_uint64 : IntegerEncoding -> ByStr -> Uint32 -> Option (Pair "
"Uint64 Uint32)`` Extracts a ``Uint64`` value from ``bs : ByStr``, "
"starting at position ``pos : Uint32``. On success, ``Some "
"extracted_uint64_value next_pos`` is returned. ``None`` otherwise."
msgstr ""

#: ../stdlib.rst:414
msgid ""
"``extract_uint128 : IntegerEncoding -> ByStr -> Uint32 -> Option (Pair "
"Uint128 Uint32)`` Extracts a Uint128 value from ``bs : ByStr``, starting "
"at position ``pos : Uint32``. On success, ``Some extracted_uint128_value "
"next_pos`` is returned. ``None`` otherwise."
msgstr ""

#: ../stdlib.rst:418
msgid ""
"``extract_uint256 : IntegerEncoding -> ByStr -> Uint32 -> Option (Pair "
"Uint256 Uint32)`` Extracts a ``Uint256`` value from ``bs : ByStr``, "
"starting at position ``pos : Uint32``. On success, ``Some "
"extracted_uint256_value next_pos`` is returned. ``None`` otherwise."
msgstr ""

#: ../stdlib.rst:422
msgid ""
"``extract_bystr1 : ByStr -> Uint32 -> Option (Pair ByStr1 Uint32)`` "
"Extracts a ``ByStr1`` value from ``bs : ByStr``, starting at position "
"``pos : Uint32``. On success, ``Some extracted_bystr1_value next_pos`` is"
" returned. ``None`` otherwise."
msgstr ""

#: ../stdlib.rst:426
msgid ""
"``extract_bystr2 : ByStr -> Uint32 -> Option (Pair ByStr2 Uint32)`` "
"Extracts a ``ByStr2`` value from ``bs : ByStr``, starting at position "
"``pos : Uint32``. On success, ``Some extracted_bystr2_value next_pos`` is"
" returned. ``None`` otherwise."
msgstr ""

#: ../stdlib.rst:430
msgid ""
"``extract_bystr20 : ByStr -> Uint32 -> Option (Pair ByStr20 Uint32)`` "
"Extracts a ``ByStr2`` value from ``bs : ByStr``, starting at position "
"``pos : Uint32``. On success, ``Some extracted_bystr20_value next_pos`` "
"is returned. ``None`` otherwise."
msgstr ""

#: ../stdlib.rst:434
msgid ""
"``extract_bystr32 : ByStr -> Uint32 -> Option (Pair ByStr32 Uint32)`` "
"Extracts a ``ByStr2`` value from ``bs : ByStr``, starting at position "
"``pos : Uint32``. On success, ``Some extracted_bystr32_value next_pos`` "
"is returned. ``None`` otherwise."
msgstr ""

#: ../stdlib.rst:438
msgid ""
"``append_uint32 : IntegerEncoding -> ByStr -> Uint32 -> ByStr`` Serialize"
" a ``Uint32`` value (with the specified encoding) and append it to the "
"provided ``ByStr`` and return the result ``ByStr``."
msgstr ""

#: ../stdlib.rst:442
msgid ""
"``append_uint64 : IntegerEncoding -> ByStr -> Uint32 -> ByStr`` Serialize"
" a ``Uint64`` value (with the specified encoding) and append it to the "
"provided ``ByStr`` and return the result ``ByStr``."
msgstr ""

#: ../stdlib.rst:446
msgid ""
"``append_uint128 : IntegerEncoding -> ByStr -> Uint32 -> ByStr`` "
"Serialize a ``Uint128`` value (with the specified encoding) and append it"
" to the provided ``ByStr`` and return the result ``ByStr``."
msgstr ""

#: ../stdlib.rst:450
msgid ""
"``append_uint256 : IntegerEncoding -> ByStr -> Uint32 -> ByStr`` "
"Serialize a ``Uint256`` value (with the specified encoding) and append it"
" to the provided ``ByStr`` and return the result ``ByStr``."
msgstr ""

#: ../stdlib.rst:455
msgid "Polynetwork Support Library"
msgstr ""

#: ../stdlib.rst:457
msgid ""
"This library provides utility functions used in building the Zilliqa "
"Polynetwork bridge. These functions are migrated from `Polynetwork's "
"ethereum support <https://github.com/polynetwork/eth-"
"contracts/tree/master/contracts/core/cross_chain_manager>`_, with the "
"contract itself separately deployed."
msgstr ""

