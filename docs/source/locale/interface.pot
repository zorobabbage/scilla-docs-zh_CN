# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, Zilliqa Research
# This file is distributed under the same license as the scilla中文文档 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: scilla中文文档 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-21 15:18+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../interface.rst:5
msgid "Interpreter Interface"
msgstr ""

#: ../interface.rst:7
msgid "The Scilla interpreter provides a calling interface that enables users to invoke transitions with specified inputs and obtain outputs. Execution of a transition with supplied inputs will result in a set of outputs, and a change in the smart contract mutable state."
msgstr ""

#: ../interface.rst:15
msgid "Calling Interface"
msgstr ""

#: ../interface.rst:17
msgid "A transition defined in a contract can be called either by the issuance of a transaction, or by message calls from another contract. The same calling interface will be used to call the contract via external transactions and inter-contract message calls."
msgstr ""

#: ../interface.rst:22
msgid "The inputs to the interpreter (``scilla-runner``) consists of four input JSON files as described below. Every invocation of the interpreter to execute a transition must be provided with these four JSON inputs: ::"
msgstr ""

#: ../interface.rst:28
msgid "The interpreter executable can be run either to create a contract (denoted ``CreateContract``) or to invoke a transition in a contract (``InvokeContract``). Depending on which of these two, some of the arguments will be absent. The table below outlays the arguments that should be present in each of these two cases.  A ``CreateContract`` is distinguished from an ``InvokeContract``, based on the presence of ``input_message.json`` and ``input_state.json``. If these arguments are absent, then the interpreter will evaluate it as a ``CreateContract``. Else, it will treat it as an ``InvokeContract``. Note that for ``CreateContract``, the interpreter only performs basic checks such as matching the contract’s immutable parameters with ``init.json`` and whether the contract definition is free of syntax errors."
msgstr ""

#: ../interface.rst:42
msgid "Present"
msgstr ""

#: ../interface.rst:44
msgid "Input"
msgstr ""

#: ../interface.rst:44
#: ../interface.rst:74
#: ../interface.rst:260
#: ../interface.rst:453
#: ../interface.rst:469
#: ../interface.rst:491
msgid "Description"
msgstr ""

#: ../interface.rst:44
msgid "``CreateContract``"
msgstr ""

#: ../interface.rst:44
msgid "``InvokeContract``"
msgstr ""

#: ../interface.rst:46
msgid "``init.json``"
msgstr ""

#: ../interface.rst:46
msgid "Immutable contract parameters"
msgstr ""

#: ../interface.rst:46
#: ../interface.rst:46
#: ../interface.rst:48
#: ../interface.rst:50
#: ../interface.rst:50
#: ../interface.rst:52
#: ../interface.rst:54
#: ../interface.rst:54
#: ../interface.rst:56
#: ../interface.rst:56
msgid "Yes"
msgstr ""

#: ../interface.rst:48
msgid "``input_state.json``"
msgstr ""

#: ../interface.rst:48
msgid "Mutable contract state"
msgstr ""

#: ../interface.rst:48
#: ../interface.rst:52
msgid "No"
msgstr ""

#: ../interface.rst:50
msgid "``input_blockchain.json``"
msgstr ""

#: ../interface.rst:50
msgid "Blockchain state"
msgstr ""

#: ../interface.rst:52
msgid "``input_message.json``"
msgstr ""

#: ../interface.rst:52
msgid "Transition and parameters"
msgstr ""

#: ../interface.rst:54
msgid "``output.json``"
msgstr ""

#: ../interface.rst:54
msgid "Output"
msgstr ""

#: ../interface.rst:56
msgid "``input.scilla``"
msgstr ""

#: ../interface.rst:56
msgid "Input contract"
msgstr ""

#: ../interface.rst:59
msgid "In addition to the command line arguments provided above, the interpreter also expects a mandatory ``-gaslimit X`` argument (where ``X`` is a positive integer value). If the contract or library module imports other libraries (including the standard library), a `-libdir` option must be provided, with a list of directories (in the standard PATH format) as the argument, indicating directories to be searched for for finding the libraries."
msgstr ""

#: ../interface.rst:67
msgid "Initializing the Immutable State"
msgstr ""

#: ../interface.rst:69
msgid "``init.json`` defines the values of the immutable parameters of a contract. It does not change between invocations.  The JSON is an array of objects, each of which contains the following fields:"
msgstr ""

#: ../interface.rst:74
#: ../interface.rst:260
#: ../interface.rst:453
#: ../interface.rst:469
#: ../interface.rst:491
msgid "Field"
msgstr ""

#: ../interface.rst:76
msgid "``vname``"
msgstr ""

#: ../interface.rst:76
msgid "Name of the immutable contract parameter"
msgstr ""

#: ../interface.rst:77
msgid "``type``"
msgstr ""

#: ../interface.rst:77
msgid "Type of the immutable contract parameter"
msgstr ""

#: ../interface.rst:78
msgid "``value``"
msgstr ""

#: ../interface.rst:78
msgid "Value of the immutable contract parameter"
msgstr ""

#: ../interface.rst:81
msgid "``init.json`` must specify ``_scilla_version`` with type ``Uint32``, specifying a value that is the same as specified in the contract's source. Additionally, the blockchain will provide two implicit contract parameters ``_this_address``, a ``ByStr20`` value denoting the address of the contract itself, and ``_creation_block``, a ``BNum`` value denoting the block in which the contract is / was created. While working with the offline interpreter, you may need to provide these values in the ``init.json`` yourself."
msgstr ""

#: ../interface.rst:90
#: ../interface.rst:278
#: ../interface.rst:502
msgid "Example 1"
msgstr ""

#: ../interface.rst:92
msgid "For the ``HelloWorld.scilla`` contract fragment given below, we have only one immutable parameter ``owner``."
msgstr ""

#: ../interface.rst:102
#: ../interface.rst:146
msgid "A sample ``init.json`` for this contract will look like the following:"
msgstr ""

#: ../interface.rst:131
#: ../interface.rst:298
#: ../interface.rst:553
msgid "Example 2"
msgstr ""

#: ../interface.rst:133
msgid "For the ``Crowdfunding.scilla`` contract fragment given below, we have three immutable parameters ``owner``, ``max_block`` and ``goal``."
msgstr ""

#: ../interface.rst:185
msgid "Example 3: Using Address Types"
msgstr ""

#: ../interface.rst:187
msgid "Whenever a contract has an immutable parameter of an address type, the type ``ByStr20`` must be used in the to initialise the parameter."
msgstr ""

#: ../interface.rst:190
msgid "For the ``SimpleExchange`` we have a single the immutable parameter, which has an address type:"
msgstr ""

#: ../interface.rst:200
msgid "The JSON entry for the ``initial_admin`` parameter must use the type ``ByStr20`` rather than the type ``ByStr20 with end``, so an example ``init.json`` for this contract could like the following:"
msgstr ""

#: ../interface.rst:234
msgid "Input Blockchain State"
msgstr ""

#: ../interface.rst:236
msgid "``input_blockchain.json`` feeds the current blockchain state to the interpreter. It is similar to ``init.json``, except that it is a fixed size array of objects, where each object has ``vname`` fields only from a predetermined set (which correspond to actual blockchain state variables)."
msgstr ""

#: ../interface.rst:241
msgid "**Permitted JSON fields:** At the moment, the only blockchain value that is exposed to contracts is the current ``BLOCKNUMBER``."
msgstr ""

#: ../interface.rst:254
msgid "Input Message"
msgstr ""

#: ../interface.rst:256
msgid "``input_message.json`` contains the information required to invoke a transition. The json is an array containing the following four objects:"
msgstr ""

#: ../interface.rst:262
#: ../interface.rst:471
msgid "``_tag``"
msgstr ""

#: ../interface.rst:262
#: ../interface.rst:471
msgid "Transition to be invoked"
msgstr ""

#: ../interface.rst:263
#: ../interface.rst:472
msgid "``_amount``"
msgstr ""

#: ../interface.rst:263
#: ../interface.rst:472
msgid "Number of QA to be transferred"
msgstr ""

#: ../interface.rst:264
msgid "``_sender``"
msgstr ""

#: ../interface.rst:264
msgid "Address of the invoker (in a chain call, this is the immediate caller)"
msgstr ""

#: ../interface.rst:265
msgid "``_origin``"
msgstr ""

#: ../interface.rst:265
msgid "Address from which the transaction originated"
msgstr ""

#: ../interface.rst:266
#: ../interface.rst:474
#: ../interface.rst:494
msgid "``params``"
msgstr ""

#: ../interface.rst:266
msgid "An array of parameter objects"
msgstr ""

#: ../interface.rst:270
msgid "All the four fields are mandatory. ``params`` can be empty if the transition takes no parameters."
msgstr ""

#: ../interface.rst:273
#: ../interface.rst:478
msgid "The ``params`` array is encoded similar to how ``init.json`` is encoded, with each parameter specifying the (``vname``, ``type``, ``value``) that has to be passed to the transition that is being invoked."
msgstr ""

#: ../interface.rst:279
#: ../interface.rst:299
msgid "For the following transition:"
msgstr ""

#: ../interface.rst:285
#: ../interface.rst:305
msgid "an example ``input_message.json`` is given below:"
msgstr ""

#: ../interface.rst:334
msgid "Example 3: Using user-defined types"
msgstr ""

#: ../interface.rst:338
msgid "Due to a bug in the Scilla implementation the information in this section is only valid from Scilla version 0.10.0 and forwards. Contracts written in Scilla versions prior to 0.10.0 and which exploit this bug will have to be rewritten and redeployed, as they will no longer work from version 0.10.0 and onwards."
msgstr ""

#: ../interface.rst:344
msgid "When passing a value of user-defined type through the interpreter interface, the json structure is identical to the one described in the previous example. However, in the interpreter interface all types must be fully qualified, which is defined as follows:"
msgstr ""

#: ../interface.rst:346
msgid "For a user-defined type ``T`` defined in a module deployed at address ``A``, the fully qualified name is ``A.T``."
msgstr ""

#: ../interface.rst:348
msgid "For a user-defined constructor ``C`` defined in a module deployed at address ``A``, the fully qualified name is ``A.C``."
msgstr ""

#: ../interface.rst:352
msgid "For the purposes of offline development the address of a module is defined as the module's filename, without file extension. That is, if a contract defines a type ``T`` with a constructor ``C`` in a file ``F.scilla``, then the fully qualified name of the type is ``F.T``, and the fully qualified name of the constructor is ``F.C``."
msgstr ""

#: ../interface.rst:359
msgid "As an example consider a contract that implements a simple board game. The contract might define a type ``Direction`` and a transition ``MoveAction`` as follows:"
msgstr ""

#: ../interface.rst:374
msgid "Say that the contract has been deployed at address ``0x1234567890123456789012345678906784567890``. To invoke the transition with parameters ``East`` and ``2``, use the type name ``0x1234567890123456789012345678906784567890.Direction`` and the constructor name ``0x1234567890123456789012345678906784567890.East`` in the message json:"
msgstr ""

#: ../interface.rst:403
msgid "If a contract has immutable fields of user-defined types, then the fields must also be initialised using fully qualified names in the associated ``init.json``."
msgstr ""

#: ../interface.rst:406
msgid "Example 4: Using Address Types"
msgstr ""

#: ../interface.rst:408
msgid "When passing an address value the type ``ByStr20`` must be used. It is not possible to use address types (``ByStr20 with ... end``) in messages."
msgstr ""

#: ../interface.rst:412
msgid "This means that for the following transition"
msgstr ""

#: ../interface.rst:421
msgid "the ``input_message.json`` must use the type ``ByStr20`` for the ``new_token`` parameter, e.g., as follows:"
msgstr ""

#: ../interface.rst:447
msgid "Interpreter Output"
msgstr ""

#: ../interface.rst:449
msgid "The interpreter will return a JSON object (``output.json``)  with the following fields:"
msgstr ""

#: ../interface.rst:455
msgid "``scilla_major_version``"
msgstr ""

#: ../interface.rst:455
msgid "The major version of the Scilla language of this contract."
msgstr ""

#: ../interface.rst:456
msgid "``gas_remaining``"
msgstr ""

#: ../interface.rst:456
msgid "The remaining gas after invoking or deploying a contract."
msgstr ""

#: ../interface.rst:457
msgid "``_accepted``"
msgstr ""

#: ../interface.rst:457
msgid "Whether the incoming QA have been accepted (Either ``\"true\"`` or ``\"false\"``)"
msgstr ""

#: ../interface.rst:458
msgid "``message``"
msgstr ""

#: ../interface.rst:458
msgid "The message to be sent to another contract/non-contract account, if any."
msgstr ""

#: ../interface.rst:459
msgid "``states``"
msgstr ""

#: ../interface.rst:459
msgid "An array of objects that form the new contract state"
msgstr ""

#: ../interface.rst:460
msgid "``events``"
msgstr ""

#: ../interface.rst:460
msgid "An array of events emitted by the transition and the procedures it invoked."
msgstr ""

#: ../interface.rst:463
msgid "``message`` is a JSON object with a similar format to ``input_message.json``, except that it has a ``_recipient`` field instead of the ``_sender`` field. The fields in ``message`` are given below:"
msgstr ""

#: ../interface.rst:473
msgid "``_recipient``"
msgstr ""

#: ../interface.rst:473
msgid "Address of the recipient"
msgstr ""

#: ../interface.rst:474
msgid "An array of parameter objects to be passed"
msgstr ""

#: ../interface.rst:482
msgid "``states`` is an array of objects that represents the mutable state of the contract. Each entry of the ``states`` array also specifies (``vname``, ``type``, ``value``)."
msgstr ""

#: ../interface.rst:486
msgid "``events`` is an array of objects that represents the events emitted by the transition. The fields in each object in the ``events`` array are given below:"
msgstr ""

#: ../interface.rst:493
msgid "``_eventname``"
msgstr ""

#: ../interface.rst:493
msgid "The name of the event"
msgstr ""

#: ../interface.rst:494
msgid "An array of additional event fields"
msgstr ""

#: ../interface.rst:497
msgid "The ``params`` array is encoded similar to how ``init.json`` is encoded, with each parameter specifying the (``vname``, ``type``, ``value``) of each event field."
msgstr ""

#: ../interface.rst:504
msgid "An example of the output generated by ``Crowdfunding.scilla`` is given below. The example also shows the format for maps in contract states."
msgstr ""

#: ../interface.rst:555
msgid "For values of an ADT type, the ``value`` field contains three subfields:"
msgstr ""

#: ../interface.rst:557
msgid "``constructor``: The name of the constructor used to construct the value."
msgstr ""

#: ../interface.rst:559
msgid "``argtypes``: An array of type instantiations. For the ``List`` and ``Option`` types, this array will contain one type, indicating the type of the list elements or the optional value, respectively. For the ``Pair`` type, the array will contain two types, indicating the types of the two values in the pair. For all other ADTs, the array will be empty."
msgstr ""

#: ../interface.rst:566
msgid "``arguments``: The arguments to the constructor."
msgstr ""

#: ../interface.rst:568
msgid "The following example shows how values of the ``List`` and ``Option`` types are represented in the output json:"
msgstr ""

#: ../interface.rst:618
msgid "Input Mutable Contract State"
msgstr ""

#: ../interface.rst:620
msgid "``input_state.json`` contains the current value of mutable state variables. It has the same forms  as the ``states`` field in ``output.json``.  An example of ``input_state.json`` for ``Crowdfunding.scilla`` is given below."
msgstr ""
